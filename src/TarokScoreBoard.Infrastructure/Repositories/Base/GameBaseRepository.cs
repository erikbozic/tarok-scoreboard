// #autogenerated
using Npgsql;
using Dapper;
using System.Threading.Tasks;
using System;
using TarokScoreBoard.Core.Entities;

namespace TarokScoreBoard.Infrastructure.Repositories
{
  public class GameBaseRepository : BaseRepository<Game>
  {
    protected string selectFields = @"
        date, 
				game_id, 
				name";

    protected override string BaseSelect { get; set; }

    public GameBaseRepository(NpgsqlConnection conn) : base(conn)
    {    
      BaseSelect = $@"
        SELECT
          {selectFields}
        FROM game";
    }

            
    public Game Get(Guid gameid)
    {
      return conn.QueryFirst<Game>($@"
      {BaseSelect}
      WHERE game_id = :gameid",
      new { gameid });
    }

    public async Task<Game> GetAsync(Guid gameid)
    {
      return await conn.QueryFirstAsync<Game>($@"
      {BaseSelect}
      WHERE game_id = :gameid",
      new { gameid });
    }

    public Game Update(Game entity)
    {
      return conn.QueryFirst<Game>($@"
      UPDATE game SET
        date = :Date, 
				game_id = :GameId, 
				name = :Name
      WHERE game_id = :GameId
      RETURNING
        {selectFields}",
      entity);
    }

    public async Task<Game> UpdateAsync(Game entity)
    {
      return await conn.QueryFirstAsync<Game>($@"
      UPDATE game SET
        date = :Date, 
				game_id = :GameId, 
				name = :Name
      WHERE game_id = :GameId
      RETURNING            
        {selectFields}",
      entity);
    }
            
    public bool Delete(Guid gameid)
    {
      return conn.Execute(@"
      DELETE FROM 
        game
      WHERE game_id = :gameid",
      new { gameid }) == 1;
    }

    public async Task<bool> DeleteAsync(Guid gameid)
    {
      return await conn.ExecuteAsync(@"
      DELETE FROM 
        game
      WHERE game_id = :gameid",
      new { gameid }) == 1;
    }
    
    public Game Add(Game entity)
    {
      return conn.QueryFirst<Game>($@"
      INSERT INTO game
      (
        date, 
				game_id, 
				name
      )
      VALUES (:Date, :GameId, :Name)
      RETURNING
        {selectFields}
      ",
      entity);
    }

    public async Task<Game> AddAsync(Game entity)
    {
      return await conn.QueryFirstAsync<Game>($@"
      INSERT INTO game
      (
        date, 
				game_id, 
				name
      )
      VALUES (:Date, :GameId, :Name)
      RETURNING
        {selectFields}
      ",
      entity);
    }
  }
}
