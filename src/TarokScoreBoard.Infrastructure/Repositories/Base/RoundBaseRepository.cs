// #autogenerated
using Npgsql;
using Dapper;
using System.Threading.Tasks;
using System;
using TarokScoreBoard.Core.Entities;

namespace TarokScoreBoard.Infrastructure.Repositories
{
  public class RoundBaseRepository : BaseRepository<Round>
  {
    protected string selectFields = @"
        contra_factor, 
				difference, 
				game_id, 
				game_type, 
				is_klop, 
				lead_player_id, 
				mond_fang_player_id, 
				round_id, 
				round_number, 
				supporting_player_id, 
				won";

    protected override string baseSelect { get; set; }

    public RoundBaseRepository(NpgsqlConnection conn) : base(conn)
    {    
      baseSelect = $@"
        SELECT
          {selectFields}
        FROM round";
    }

            
    public Round Get(Guid roundid)
    {
      return conn.QueryFirst<Round>($@"
      {baseSelect}
      WHERE round_id = :roundid",
      new { roundid });
    }

    public async Task<Round> GetAsync(Guid roundid)
    {
      return await conn.QueryFirstAsync<Round>($@"
      {baseSelect}
      WHERE round_id = :roundid",
      new { roundid });
    }

    public Round Update(Round entity)
    {
      return conn.QueryFirst<Round>($@"
      UPDATE round SET
        contra_factor = :ContraFactor, 
				difference = :Difference, 
				game_id = :GameId, 
				game_type = :GameType, 
				is_klop = :IsKlop, 
				lead_player_id = :LeadPlayerId, 
				mond_fang_player_id = :MondFangPlayerId, 
				round_id = :RoundId, 
				round_number = :RoundNumber, 
				supporting_player_id = :SupportingPlayerId, 
				won = :Won
      WHERE round_id = :RoundId
      RETURNING
        {selectFields}",
      entity);
    }

    public async Task<Round> UpdateAsync(Round entity)
    {
      return await conn.QueryFirstAsync<Round>($@"
      UPDATE round SET
        contra_factor = :ContraFactor, 
				difference = :Difference, 
				game_id = :GameId, 
				game_type = :GameType, 
				is_klop = :IsKlop, 
				lead_player_id = :LeadPlayerId, 
				mond_fang_player_id = :MondFangPlayerId, 
				round_id = :RoundId, 
				round_number = :RoundNumber, 
				supporting_player_id = :SupportingPlayerId, 
				won = :Won
      WHERE round_id = :RoundId
      RETURNING            
        {selectFields}",
      entity);
    }
            
    public bool Delete(Guid roundid)
    {
      return conn.Execute(@"
      DELETE FROM 
        round
      WHERE round_id = :roundid",
      new { roundid }) == 1;
    }

    public async Task<bool> DeleteAsync(Guid roundid)
    {
      return await conn.ExecuteAsync(@"
      DELETE FROM 
        round
      WHERE round_id = :roundid",
      new { roundid }) == 1;
    }
    
    public Round Add(Round entity)
    {
      return conn.QueryFirst<Round>($@"
      INSERT INTO round
      (
        contra_factor, 
				difference, 
				game_id, 
				game_type, 
				is_klop, 
				lead_player_id, 
				mond_fang_player_id, 
				round_id, 
				round_number, 
				supporting_player_id, 
				won
      )
      VALUES (:ContraFactor, :Difference, :GameId, :GameType, :IsKlop, :LeadPlayerId, :MondFangPlayerId, :RoundId, :RoundNumber, :SupportingPlayerId, :Won)
      RETURNING
        {selectFields}
      ",
      entity);
    }

    public async Task<Round> AddAsync(Round entity)
    {
      return await conn.QueryFirstAsync<Round>($@"
      INSERT INTO round
      (
        contra_factor, 
				difference, 
				game_id, 
				game_type, 
				is_klop, 
				lead_player_id, 
				mond_fang_player_id, 
				round_id, 
				round_number, 
				supporting_player_id, 
				won
      )
      VALUES (:ContraFactor, :Difference, :GameId, :GameType, :IsKlop, :LeadPlayerId, :MondFangPlayerId, :RoundId, :RoundNumber, :SupportingPlayerId, :Won)
      RETURNING
        {selectFields}
      ",
      entity);
    }
  }
}
